/*
===============================================================
 Plastome Analysis Pipeline. Started April 2022.
 #### Homepage / Documentation
 https://github.com/alexisbourdais/
 #### Authors
 Alexis Bourdais
---------------------------------------------------------------
*/

//////////////////////////////////////////////////////////////////////
//////////////////////    Nextflow parameters      ///////////////////
//////////////////////////////////////////////////////////////////////
nextflow.enable.dsl=2

// Maximum available cluster resources
params {
    max_memory = 200.GB
    max_cpus = 32
    max_time = 336.h
}

////////////////////////////////////////////////////////////////////
////////////////////   Check max function   //////////////////////// (from nfcore community)
////////////////////////////////////////////////////////////////////

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

///////////////////////////////////////////////////////////////////
//////////////////////    Process Parameters    ///////////////////
///////////////////////////////////////////////////////////////////

/* Singularity mount */
params.singularity = "-B /scratch:/scratch -B /home:/home -B /local:/local -B /db:/db -B /groups:/groups"

/* Workflow */
params.workflow = ""

/* Assembler */
params.assembler = ""

/* Work directory */
params.baseDir = "$PWD"

/* Results directory */
params.resultsDir = "${params.baseDir}/Results/"

/* Assembly directory */
params.assemblyDir = "${params.resultsDir}/Assembly/"
params.formatAsm = ".fasta"
params.asmFiles = "${params.assemblyDir}/*${params.formatAsm}"

/* Reads directory */
params.baseReadName = "_R{1,2}"
params.formatReadName = ".fastq.gz"
params.readDir = "${params.baseDir}/Data/"
params.readFiles = "${params.readDir}*${params.baseReadName}${params.formatReadName}"

/* Parameters of Trimming */
params.trimming = false

/* Parameters of Trimming */
params.annotation = "all"

/* Parameters of GetOrganelle */
params.getIndex = "embplant_mt,embplant_pt"
params.getKmer = "21,45,65,85,105"

/* Parameters of sqtk */
params.seqtkSubsamp = 2000000

/* Parameters of FastPlast */
params.fastIndex = "Brassicales"

/* Parameters of OrgAsm */
params.orgasmProbes = "protChloroArabidopsis"

/* Parameters of Mummer */
params.nucmerRef = "${params.baseDir}/Data/brassica_oleracea.fasta"
params.mummerAxe = "'[0:154000]'"
params.mummerFormatOut = "png"

/* Parameters of Mafft */
params.mafftMethod = "auto"

/* Parameters of Phylogenetic */
params.phylogeny = "raxml"

/* Parameters of raxml  */
params.raxmlModel = "GTRGAMMAI"

/* Parameters of raxml-ng  */
params.raxmlngModel = "GTR+G+I"
params.raxmlngBootstrap = "200"
params.raxmlngOption = ""

/* Parameters of iqtree  */
params.iqtreeModel = "GTR+I+G"
params.iqtreeOption = ""

report {
    enabled = true
    overwrite = true
    file = "${params.resultsDir}/ChloroBras_report.html"
}

///////////////////////////////////////////////////////////
//////////////////////     Profile      ///////////////////
///////////////////////////////////////////////////////////

conda.enabled = true

singularity {
    enabled = true
    autoMounts = true
    runOptions = "${params.singularity}"
}

profiles {
    standard {
        process.executor = 'local'
        executor.cpus = 4
        executor.memory = 16.GB
    }

    slurm {
        process {
            executor = 'slurm'

            withLabel: process_low {
                cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
                memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
                time   = { check_max( 4.h   * task.attempt, 'time'    ) }
            }
            withLabel: process_medium {
                cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
                memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
                time   = { check_max( 8.h   * task.attempt, 'time'    ) }
            }
            withLabel: process_high {
                cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
                memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
                time   = { check_max( 16.h  * task.attempt, 'time'    ) }
            }
        }
    }

    singularity {
        process {
            withName: seqtk {
                container = 'https://depot.galaxyproject.org/singularity/seqtk%3A1.4--he4a0461_2'
            }
            withName: orgasm {
                container = 'docker://gricad-registry.univ-grenoble-alpes.fr/eric.coissac/phyloskims:latest'
            }
            withName: fastplast {
                container = 'docker://quay.io/mboudet/fastplast:latest'
            }
            withLabel: getorganelle {
                container = 'https://depot.galaxyproject.org/singularity/getorganelle%3A1.7.7.1--pyhdfd78af_0'
            }
            withName: mummer {
                //container = 'https://depot.galaxyproject.org/singularity/mummer4%3A4.0.0rc1--pl5321hdbdd923_7' # gnuplot missing
                conda = 'bioconda::mummer conda-forge::gnuplot'
            }
            withName: quast {
                conda = 'https://depot.galaxyproject.org/singularity/quast%3A5.2.0--py39pl5321heaaa4ec_4'
            }
            withName: mafft {
                container = 'https://depot.galaxyproject.org/singularity/mafft%3A7.525--h031d066_1'
            }
            withName: raxml {
                container = 'https://depot.galaxyproject.org/singularity/raxml%3A8.2.9--hec16e2b_6'
            }
            withName: iqtree {
                container = 'https://depot.galaxyproject.org/singularity/iqtree:2.3.6--hdbdd923_0'
            }
            withName: raxmlng {
                container = 'https://depot.galaxyproject.org/singularity/raxml-ng:1.2.2--h6d1f11b_0'
            }
            withName: fastqc {
                container = "https://depot.galaxyproject.org/singularity/fastqc:0.12.1--hdfd78af_0"
            }
            withName: multiqc {
                container = "https://depot.galaxyproject.org/singularity/multiqc%3A1.9--pyh9f0ad1d_0"
            }
            withName: trimgalore {
                container = "https://depot.galaxyproject.org/singularity/trim-galore:0.6.9--hdfd78af_0"
            }
            withName: fastp {
                container = "https://depot.galaxyproject.org/singularity/fastp:0.23.4--h125f33a_5"
            }
            withName: mfannot {
                container = "docker://nbeck/mfannot"
            }
            withName: organnot {
                container = "docker://gricad-registry.univ-grenoble-alpes.fr/eric.coissac/phyloskims:latest"
            }
        } 
    }

    conda {      
        process {
            withName: seqtk {
                conda = 'bioconda::fusioncatcher-seqtk'
            }
            withName: orgasm {
                container = 'docker://gricad-registry.univ-grenoble-alpes.fr/eric.coissac/phyloskims:latest'
            }
            withName: fastplast {
                container = 'docker://quay.io/mboudet/fastplast:latest'
            }
            withLabel: getorganelle {
                conda = 'bioconda::getorganelle'
            }
            withName: mummer {
                conda = 'bioconda::mummer conda-forge::gnuplot'
            }
            withName: quast {
                conda = 'bioconda::quast'
            }
            withName: mafft {
                conda = 'bioconda::mafft'
            }
            withName: raxml {
                conda = 'bioconda::raxml'
            }
            withName: iqtree {
                conda = 'bioconda::iqtree'
            }
            withName: raxmlng {
                conda = 'bioconda::raxml-ng'
            }
            withName: fastqc {
                conda = 'bioconda::fastqc'
            }
            withName: multiqc {
                conda = 'python=3.5 bioconda::multiqc'
            }
            withName: trimgalore {
                conda = 'bioconda::trim-galore'
            }
            withName: fastp {
                conda = 'bioconda::fastp'
            }
            withName: organnot {
                container = "docker://gricad-registry.univ-grenoble-alpes.fr/eric.coissac/phyloskims:latest"
            }
        } 
    }
}